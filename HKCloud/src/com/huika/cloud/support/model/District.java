package com.huika.cloud.support.model;

import com.huika.cloud.support.db.AddressDaoSession;
import com.huika.cloud.support.db.CityDao;
import com.huika.cloud.support.db.DistrictDao;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
/**
 * Entity mapped to table DISTRICT.
 */
public class District {

	private int districtID;
	private String districtName;
	private int cityID;

	/** Used to resolve relations */
	private transient AddressDaoSession daoSession;

	/** Used for active entity operations. */
	private transient DistrictDao myDao;

	private City city;
	private Integer city__resolvedKey;

	public District() {
	}

	public District(int districtID) {
		this.districtID = districtID;
	}

	public District(int districtID, String districtName, int cityID) {
		this.districtID = districtID;
		this.districtName = districtName;
		this.cityID = cityID;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(AddressDaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getDistrictDao() : null;
	}

	public int getDistrictID() {
		return districtID;
	}

	public void setDistrictID(int districtID) {
		this.districtID = districtID;
	}

	public String getDistrictName() {
		return districtName;
	}

	public void setDistrictName(String districtName) {
		this.districtName = districtName;
	}

	public int getCityID() {
		return cityID;
	}

	public void setCityID(int cityID) {
		this.cityID = cityID;
	}

	/** To-one relationship, resolved on first access. */
	public City getCity() {
		int __key = this.cityID;
		if (city__resolvedKey == null || !city__resolvedKey.equals(__key)) {
			if (daoSession == null) { throw new DaoException("Entity is detached from DAO context"); }
			CityDao targetDao = daoSession.getCityDao();
			City cityNew = targetDao.load(__key);
			synchronized (this) {
				city = cityNew;
				city__resolvedKey = __key;
			}
		}
		return city;
	}

	public void setCity(City city) {
		if (city == null) { throw new DaoException("To-one property 'cityID' has not-null constraint; cannot set to-one to null"); }
		synchronized (this) {
			this.city = city;
			cityID = city.getCityID();
			city__resolvedKey = cityID;
		}
	}

	/** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
	public void delete() {
		if (myDao == null) { throw new DaoException("Entity is detached from DAO context"); }
		myDao.delete(this);
	}

	/** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
	public void update() {
		if (myDao == null) { throw new DaoException("Entity is detached from DAO context"); }
		myDao.update(this);
	}

	/** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
	public void refresh() {
		if (myDao == null) { throw new DaoException("Entity is detached from DAO context"); }
		myDao.refresh(this);
	}

}
