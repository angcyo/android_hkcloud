package com.huika.cloud.support.model;


import com.huika.cloud.support.db.AddressDaoSession;
import com.huika.cloud.support.db.CityDao;
import com.huika.cloud.support.db.ProvinceDao;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.
/**
 * Entity mapped to table CITY.
 */
public class City {

	private int cityID;
	private String cityName;
	private String zipCode;
	private int provinceID;

	/** Used to resolve relations */
	private transient AddressDaoSession daoSession;

	/** Used for active entity operations. */
	private transient CityDao myDao;

	private Province province;
	private Integer province__resolvedKey;

	public City() {
	}

	public City(int cityID) {
		this.cityID = cityID;
	}

	public City(int cityID, String cityName, String zipCode, int provinceID) {
		this.cityID = cityID;
		this.cityName = cityName;
		this.zipCode = zipCode;
		this.provinceID = provinceID;
	}

	/** called by internal mechanisms, do not call yourself. */
	public void __setDaoSession(AddressDaoSession daoSession) {
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getCityDao() : null;
	}

	public int getCityID() {
		return cityID;
	}

	public void setCityID(int cityID) {
		this.cityID = cityID;
	}

	public String getCityName() {
		return cityName;
	}

	public void setCityName(String cityName) {
		this.cityName = cityName;
	}

	public String getZipCode() {
		return zipCode;
	}

	public void setZipCode(String zipCode) {
		this.zipCode = zipCode;
	}

	public int getProvinceID() {
		return provinceID;
	}

	public void setProvinceID(int provinceID) {
		this.provinceID = provinceID;
	}

	/** To-one relationship, resolved on first access. */
	public Province getProvince() {
		int __key = this.provinceID;
		if (province__resolvedKey == null || !province__resolvedKey.equals(__key)) {
			if (daoSession == null) { throw new DaoException("Entity is detached from DAO context"); }
			ProvinceDao targetDao = daoSession.getProvinceDao();
			Province provinceNew = targetDao.load(__key);
			synchronized (this) {
				province = provinceNew;
				province__resolvedKey = __key;
			}
		}
		return province;
	}

	public void setProvince(Province province) {
		if (province == null) { throw new DaoException("To-one property 'provinceID' has not-null constraint; cannot set to-one to null"); }
		synchronized (this) {
			this.province = province;
			provinceID = province.getProvinceID();
			province__resolvedKey = provinceID;
		}
	}

	/** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
	public void delete() {
		if (myDao == null) { throw new DaoException("Entity is detached from DAO context"); }
		myDao.delete(this);
	}

	/** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
	public void update() {
		if (myDao == null) { throw new DaoException("Entity is detached from DAO context"); }
		myDao.update(this);
	}

	/** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
	public void refresh() {
		if (myDao == null) { throw new DaoException("Entity is detached from DAO context"); }
		myDao.refresh(this);
	}

}
